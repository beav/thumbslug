# Generated by Buildr 1.4.5, change to your liking


# Version number for this release
VERSION_NUMBER = "1.0.0"
# Group identifier for your projects
GROUP = "sam-proxy"
COPYRIGHT = ""

# Specify Maven 2.0 remote repositories here, like this:
repositories.remote << "http://www.ibiblio.org/maven2/"
repositories.remote << "https://repository.jboss.org/nexus/content/repositories/releases/"

require 'buildr/checkstyle'
require 'rspec/core/rake_task'

NETTY = transitive 'org.jboss.netty:netty:jar:3.2.4.Final'

desc "The Sam-proxy project"
define "sam-proxy" do

  project.version = VERSION_NUMBER
  project.group = GROUP
  manifest["Implementation-Vendor"] = COPYRIGHT
  manifest["Main-Class"] = "com.redhat.katello.sam.proxy.Main"
  compile.with NETTY
  test.compile.with NETTY

  #
  # eclipse settings
  # http://buildr.apache.org/more_stuff.html#eclipse
  #
  eclipse.natures 'org.eclipse.jdt.core.javanature'
  eclipse.builders 'org.eclipse.jdt.core.javabuilder'

  # include netty (and deps) in the jar, so it can run standalone
  package(:jar).merge NETTY
end

task :serve do
    sh "java -jar target/#{GROUP}-#{VERSION_NUMBER}.jar"
end
task :serve => :package


#==========================================================================
# RSpec functional tests
#==========================================================================
RSpec::Core::RakeTask.new do |task|

  # Support optional features env variable, specify the spec files to run
  # without the trailing '_spec.rb'. Specify multiple by separating with ':'.
  # i.e. build spec features=flex_expiry:authorization
  features = ENV['features']
  if not features.nil?
    feature_files = Array.new
    features.split(":").each do |part|
      feature_files << "spec/#{part}_spec.rb"
    end
    task.pattern = feature_files
  end

  #  task.rspec_opts = ["-I#{File.expand_path '../client/ruby/'}"]
  task.rspec_opts = ['-c']

  # Allow specify only="should do something" to run only a specific
  # test. The text must completely match the contents of your "it" string.
  only_run = ENV['only']
  if not only_run.nil?
    task.rspec_opts << "-e '#{only_run}'"
  end

  dots = ENV['dots']
  if not dots.nil?
    task.rspec_opts << "-fp"
  else
    task.rspec_opts << "-fd"
  end
end
task :spec

# runs the eclipse task to generate the .classpath and .project
# files, then fixes the output.
task :eclipse do
  puts "Fixing eclipse .classpath"
  text = File.read(".classpath")
  tmp = File.new("tmp", "w")
  text = text.gsub(/output="target\/resources"/, "")
  tmp.write(text.gsub(/<\/classpath>/, "  <classpathentry path=\"#{Java.tools_jar}\" kind=\"lib\"\/>"))
  tmp.write("</classpath>")
  tmp.close()
  FileUtils.copy("tmp", ".classpath")
  File.delete("tmp")

  # make the gettext output dir to silence eclipse errors
  mkdir_p("target/generated-source")
end
